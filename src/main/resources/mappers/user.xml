<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mandarin_shop_back.repository.UserMapper">
    <resultMap id="UserResultMap" type="com.example.mandarin_shop_back.entity.user.User">
        <id property="userId" column="user_id" />
        <result property="roleId" column="role_id" />
        <result property="customerName" column="customer_name" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="address" column="address" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
    </resultMap>

    <resultMap id="RoleResultMap" type="com.example.mandarin_shop_back.entity.account.Role">
        <id property="roleId" column="user_id" />
        <result property="roleName" column="role_name" />
        <result property="roleNameKor" column="role_name_kor" />
    </resultMap>

    <resultMap id="UserAuthResultMap" type="com.example.mandarin_shop_back.entity.user.User">
        <id property="userId" column="user_id" />
        <result property="roleNameKor" column="role_name_kor" />
        <result property="customerName" column="customer_name" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="address" column="address" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
    </resultMap>


    <resultMap id="RoleRegisterResultMap" type="com.example.mandarin_shop_back.entity.user.UserRoleRegister">
        <id property="roleRegisterId" column="role_register_id" />
        <result property="userId" column="user_id" />
        <result property="roleId" column="role_id" />
        <association property="role" resultMap="RoleResultMap" />
    </resultMap>

    <insert id="saveUser"
            parameterType="com.example.mandarin_shop_back.entity.user.User"
            keyProperty="userId"
            useGeneratedKeys="true">
        insert into user_tb
        values (0, 2, #{customerName}, #{username}, #{password}, #{phone}, #{email}, #{address}, now(), now())
    </insert>


    <select id="getUserAuth" resultMap="UserAuthResultMap">
        select
            ut.user_id,
            rt.role_name_kor,
            ut.customer_name,
            ut.phone,
            ut.email,
            ut.address,
            ut.create_date,
            ut.update_date
        from
            user_tb ut
            left outer join role_tb rt on(rt.role_id = ut.role_id)
        group by
            user_id
    </select>


    <select id="findUserByUsername"
            parameterType="string"
            resultMap="UserResultMap"
    >
        select
            user_id,
            role_id,
            customer_name,
            username,
            password,
            email,
            create_date,
            update_date
        from
            user_tb
        where
            username = #{username}
    </select>

    <select id="findUserByUserId"
            resultMap="UserResultMap"
    >
        select
            user_id,
            role_id,
            customer_name,
            username,
            password,
            email,
            create_date,
            update_date
        from
            user_tb
        where
            user_id = #{userId}
    </select>

    <update id="updateUserAccountTemporaryPw">
        update
            user_tb
        set
            password = #{tempPassword}
        where
            user_id = #{userId}
    </update>

    <update id="modifyUserPassword"
            parameterType="com.example.mandarin_shop_back.entity.user.User">
        update
            user_tb
        set
            password = #{password},
            update_date = now()
        where
            user_id = #{userId}
    </update>

    <select id="findAccountUserByNameAndEmail" resultMap="UserResultMap">
        select
            *
        from
            user_tb
        where
            customer_name = #{customerName}
            and email = #{email}
    </select>

    <select id="findAccountByNameAndEmail" resultMap="UserResultMap">
        select
        *
        from
            user_tb
        where
            username = #{username}
            and email = #{email}
    </select>

    <update id="updateAccountTemporaryPw">
        update
            user_tb
        set
            password = #{tempPassword}
        where
            user_id = #{userId}
    </update>


</mapper>